
play.i18n.langs=["en"]

play.assets {
  path = "/public"
  urlPrefix = "/assets"
}
play.http.secret.key="RgUkXp2r5u8x/A?D(G+KbPeShVmYq3t6"
play.server.http.port=9000
play.server.http.port=${?PORT}

app.api.url=${API_GATEWAY_ADDRESS}
app.api.name=${SOCIETY_MANAGEMENT_SERVICE_NAME}
app.api.key=${SOCIETY_MANAGEMENT_API_KEY}

play.filters.hosts {
  allowed = [${SOCIETY_MANAGEMENT_ALLOWED_HOSTS}, "localhost:9000"]
}

mongo {
  address = ${MONGO_ADDRESS},
  dbName = ${SOCIETY_MANAGEMENT_DB}
  username=${SOCIETY_MANAGEMENT_DB_USERNAME}
  pwd=${SOCIETY_MANAGEMENT_DB_PASSWORD}
  collections {
    form-resources="form-resources",
    form-categories="form-categories",
    societies="societies",
    event-wizards="event-wizards",
    event-wizard-questions="event-wizard-questions",
    events="events",
    form-resource-fields="form-resource-fields",
    form-submissions="form-submissions",
    event-wizard-question-states="event-wizard-question-states",
    event-wizard-states="event-wizard-states",
    event-types="event-types"
  }
}

play.filters.csrf.header.bypassHeaders {
  X-Requested-With = "*"
  Csrf-Token = "nocheck"
}

play {
  http {
    # Session configuration
    session = {

      # The cookie name
      cookieName = "smSID"

      # Whether the secure attribute of the cookie should be set to true
      secure = true

      # The max age to set on the cookie.
      # If null, the cookie expires when the user closes their browser.
      # An important thing to note, this only sets when the browser will discard the cookie.
      maxAge = null

      # Whether the HTTP only attribute of the cookie should be set to true
      httpOnly = true

      # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
      # Possible values are "lax" and "strict". If misconfigured it's set to null.
      sameSite = "lax"

      # The domain to set on the session cookie
      # If null, does not set a domain on the session cookie.
      domain = null

      # The session path
      # Must start with /.
      path = /

      jwt {
        # The JWT signature algorithm to use on the session cookie
        # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
        signatureAlgorithm = "HS256"

        # The time after which the session is automatically invalidated.
        # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
        expiresAfter = ${SOCIETY_MANAGEMENT_SESSION_TIME}

        # The amount of clock skew to accept between servers when performing date checks
        # If you have NTP or roughtime synchronizing between servers, you can enhance
        # security by tightening this value.
        clockSkew = 5 minutes

        # The claim key under which all user data is stored in the JWT.
        dataClaim = "data"
      }
    }
  }
}
jwt {
  secret=${JWT_SECRET}
  alg=${JWT_ALG}
  issuer=${JWT_ISSUER}
  expirationTime=${JWT_EXPIRATION_TIME}
}

